version: "3.9"

services:

  # Auth microservice
  auth:
    build: ./services/auth
    container_name: auth_service
    ports:
      - "8001:8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_URL}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - b2b_net

  # User microservice
  user:
    build: ./services/user
    container_name: user_service
    ports:
      - "8002:8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - b2b_net

  # Payment microservice
  payment:
    build: ./services/payment
    container_name: payment_service
    ports:
      - "8003:8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - b2b_net

  # Document microservice
  document:
    build: ./services/document
    container_name: document_service
    ports:
      - "8004:8000"
    env_file:
      - .env
    environment:
      MONGO_URI: mongodb://mongo:27017/${MONGO_DB}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - b2b_net

  # API Gateway (NGINX Reverse Proxy)
  gateway:
    image: nginx:alpine
    container_name: api_gateway
    ports:
      - "8000:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth
      - user
      - payment
      - document
    networks:
      - b2b_net

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_b2b
    ports:
      - "5173:80"
    depends_on:
      - gateway
    networks:
      - b2b_net

  # PostgreSQL
  postgres:
    image: postgres:14
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - b2b_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      timeout: 5s

  # MongoDB
  mongo:
    image: mongo:6
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - b2b_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:
  mongo_data:

networks:
  b2b_net:
